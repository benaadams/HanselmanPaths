using Xunit;
using Microsoft.AspNetCore.Builder;

public class KebabToPascalCase
{
    [Theory]
    [InlineData((string)null, false, (string)null)]
    [InlineData("", false, "")]

    [InlineData("a", true, "A")]
    [InlineData("-", true, "")]
    [InlineData("-a", true, "A")]
    [InlineData("a-", true, "A")]
    [InlineData("a-a", true, "AA")]
    [InlineData("--", true, "")]
    [InlineData("-a-", true, "A")]
    [InlineData("--a", true, "A")]
    [InlineData("a--", true, "A")]
    [InlineData("a--a", true, "AA")]
    [InlineData("a-a-a", true, "AAA")]

    [InlineData("aa", true, "Aa")]
    [InlineData("-aa", true, "Aa")]
    [InlineData("aa-", true, "Aa")]
    [InlineData("aa-aa", true, "AaAa")]
    [InlineData("-aa-", true, "Aa")]
    [InlineData("--aa", true, "Aa")]
    [InlineData("aa--", true, "Aa")]
    [InlineData("aa--aa", true, "AaAa")]
    [InlineData("aa-aa-aa", true, "AaAaAa")]
    public void Plain(string path, bool changed, string expectedPath)
    {
        Assert.Equal(changed, HanselmanPaths.TryKebabToPascalCase(path, out var newpath));
        Assert.Equal(expectedPath, newpath);
    }

    [Theory]
    [InlineData("/", false, "/")]

    [InlineData("/a", true, "/A")]
    [InlineData("/-", true, "/")]
    [InlineData("/-a", true, "/A")]
    [InlineData("/a-", true, "/A")]
    [InlineData("/a-a", true, "/AA")]
    [InlineData("/--", true, "/")]
    [InlineData("/-a-", true, "/A")]
    [InlineData("/--a", true, "/A")]
    [InlineData("/a--", true, "/A")]
    [InlineData("/a--a", true, "/AA")]
    [InlineData("/a-a-a", true, "/AAA")]
    [InlineData("/---", true, "/")]

    [InlineData("/aa", true, "/Aa")]
    [InlineData("/-aa", true, "/Aa")]
    [InlineData("/aa-", true, "/Aa")]
    [InlineData("/aa-aa", true, "/AaAa")]
    [InlineData("/-aa-", true, "/Aa")]
    [InlineData("/--aa", true, "/Aa")]
    [InlineData("/aa--", true, "/Aa")]
    [InlineData("/aa--aa", true, "/AaAa")]
    [InlineData("/aa-aa-aa", true, "/AaAaAa")]
    public void LeadingSlash(string path, bool changed, string expectedPath)
    {
        Assert.Equal(changed, HanselmanPaths.TryKebabToPascalCase(path, out var newpath));
        Assert.Equal(expectedPath, newpath);
    }

    [Theory]
    [InlineData("a/", false, "a/")]
    [InlineData("aa/", false, "aa/")]

    [InlineData("a/a", true, "a/A")]
    [InlineData("a/-", true, "a/")]
    [InlineData("a/-a", true, "a/A")]
    [InlineData("a/a-", true, "a/A")]
    [InlineData("a/a-a", true, "a/AA")]
    [InlineData("a/--", true, "a/")]
    [InlineData("a/-a-", true, "a/A")]
    [InlineData("a/--a", true, "a/A")]
    [InlineData("a/a--", true, "a/A")]
    [InlineData("a/a--a", true, "a/AA")]
    [InlineData("a/a-a-a", true, "a/AAA")]
    [InlineData("a/---", true, "a/")]

    [InlineData("aa/aa", true, "aa/Aa")]
    [InlineData("aa/-", true, "aa/")]
    [InlineData("aa/-aa", true, "aa/Aa")]
    [InlineData("aa/aa-", true, "aa/Aa")]
    [InlineData("aa/aa-aa", true, "aa/AaAa")]
    [InlineData("aa/--", true, "aa/")]
    [InlineData("aa/-aa-", true, "aa/Aa")]
    [InlineData("aa/--aa", true, "aa/Aa")]
    [InlineData("aa/aa--", true, "aa/Aa")]
    [InlineData("aa/aa--aa", true, "aa/AaAa")]
    [InlineData("aa/aa-aa-aa", true, "aa/AaAaAa")]
    [InlineData("aa/---", true, "aa/")]

    [InlineData("/a/", false, "/a/")]
    [InlineData("/aa/", false, "/aa/")]

    [InlineData("/a/a", true, "/a/A")]
    [InlineData("/a/-", true, "/a/")]
    [InlineData("/a/-a", true, "/a/A")]
    [InlineData("/a/a-", true, "/a/A")]
    [InlineData("/a/a-a", true, "/a/AA")]
    [InlineData("/a/--", true, "/a/")]
    [InlineData("/a/-a-", true, "/a/A")]
    [InlineData("/a/--a", true, "/a/A")]
    [InlineData("/a/a--", true, "/a/A")]
    [InlineData("/a/a--a", true, "/a/AA")]
    [InlineData("/a/a-a-a", true, "/a/AAA")]
    [InlineData("/a/---", true, "/a/")]

    [InlineData("/aa/aa", true, "/aa/Aa")]
    [InlineData("/aa/-", true, "/aa/")]
    [InlineData("/aa/-aa", true, "/aa/Aa")]
    [InlineData("/aa/aa-", true, "/aa/Aa")]
    [InlineData("/aa/aa-aa", true, "/aa/AaAa")]
    [InlineData("/aa/--", true, "/aa/")]
    [InlineData("/aa/-aa-", true, "/aa/Aa")]
    [InlineData("/aa/--aa", true, "/aa/Aa")]
    [InlineData("/aa/aa--", true, "/aa/Aa")]
    [InlineData("/aa/aa--aa", true, "/aa/AaAa")]
    [InlineData("/aa/aa-aa-aa", true, "/aa/AaAaAa")]
    [InlineData("/aa/---", true, "/aa/")]

    [InlineData("b/a/", false, "b/a/")]
    [InlineData("bb/aa/", false, "bb/aa/")]

    [InlineData("b/a/a", true, "b/a/A")]
    [InlineData("b/a/-", true, "b/a/")]
    [InlineData("b/a/-a", true, "b/a/A")]
    [InlineData("b/a/a-", true, "b/a/A")]
    [InlineData("b/a/a-a", true, "b/a/AA")]
    [InlineData("b/a/--", true, "b/a/")]
    [InlineData("b/a/-a-", true, "b/a/A")]
    [InlineData("b/a/--a", true, "b/a/A")]
    [InlineData("b/a/a--", true, "b/a/A")]
    [InlineData("b/a/a--a", true, "b/a/AA")]
    [InlineData("b/a/a-a-a", true, "b/a/AAA")]
    [InlineData("b/a/---", true, "b/a/")]

    [InlineData("bb/aa/aa", true, "bb/aa/Aa")]
    [InlineData("bb/aa/-", true, "bb/aa/")]
    [InlineData("bb/aa/-aa", true, "bb/aa/Aa")]
    [InlineData("bb/aa/aa-", true, "bb/aa/Aa")]
    [InlineData("bb/aa/aa-aa", true, "bb/aa/AaAa")]
    [InlineData("bb/aa/--", true, "bb/aa/")]
    [InlineData("bb/aa/-aa-", true, "bb/aa/Aa")]
    [InlineData("bb/aa/--aa", true, "bb/aa/Aa")]
    [InlineData("bb/aa/aa--", true, "bb/aa/Aa")]
    [InlineData("bb/aa/aa--aa", true, "bb/aa/AaAa")]
    [InlineData("bb/aa/aa-aa-aa", true, "bb/aa/AaAaAa")]
    [InlineData("bb/aa/---", true, "bb/aa/")]

    [InlineData("/b/a/", false, "/b/a/")]
    [InlineData("/bb/aa/", false, "/bb/aa/")]

    [InlineData("/b/a/a", true, "/b/a/A")]
    [InlineData("/b/a/-", true, "/b/a/")]
    [InlineData("/b/a/-a", true, "/b/a/A")]
    [InlineData("/b/a/a-", true, "/b/a/A")]
    [InlineData("/b/a/a-a", true, "/b/a/AA")]
    [InlineData("/b/a/--", true, "/b/a/")]
    [InlineData("/b/a/-a-", true, "/b/a/A")]
    [InlineData("/b/a/--a", true, "/b/a/A")]
    [InlineData("/b/a/a--", true, "/b/a/A")]
    [InlineData("/b/a/a--a", true, "/b/a/AA")]
    [InlineData("/b/a/a-a-a", true, "/b/a/AAA")]
    [InlineData("/b/a/---", true, "/b/a/")]

    [InlineData("/bb/aa/aa", true, "/bb/aa/Aa")]
    [InlineData("/bb/aa/-", true, "/bb/aa/")]
    [InlineData("/bb/aa/-aa", true, "/bb/aa/Aa")]
    [InlineData("/bb/aa/aa-", true, "/bb/aa/Aa")]
    [InlineData("/bb/aa/aa-aa", true, "/bb/aa/AaAa")]
    [InlineData("/bb/aa/--", true, "/bb/aa/")]
    [InlineData("/bb/aa/-aa-", true, "/bb/aa/Aa")]
    [InlineData("/bb/aa/--aa", true, "/bb/aa/Aa")]
    [InlineData("/bb/aa/aa--", true, "/bb/aa/Aa")]
    [InlineData("/bb/aa/aa--aa", true, "/bb/aa/AaAa")]
    [InlineData("/bb/aa/aa-aa-aa", true, "/bb/aa/AaAaAa")]
    [InlineData("/bb/aa/---", true, "/bb/aa/")]
    public void Segments(string path, bool changed, string expectedPath)
    {
        Assert.Equal(changed, HanselmanPaths.TryKebabToPascalCase(path, out var newpath));
        Assert.Equal(expectedPath, newpath);
    }


    [Theory]
    [InlineData("a-a/", false, "a-a/")]
    [InlineData("aa-aa/", false, "aa-aa/")]

    [InlineData("a-a/a", true, "a-a/A")]
    [InlineData("a-a/-", true, "a-a/")]
    [InlineData("a-a/-a", true, "a-a/A")]
    [InlineData("a-a/a-", true, "a-a/A")]
    [InlineData("a-a/a-a", true, "a-a/AA")]
    [InlineData("a-a/--", true, "a-a/")]
    [InlineData("a-a/-a-", true, "a-a/A")]
    [InlineData("a-a/--a", true, "a-a/A")]
    [InlineData("a-a/a--", true, "a-a/A")]
    [InlineData("a-a/a--a", true, "a-a/AA")]
    [InlineData("a-a/a-a-a", true, "a-a/AAA")]
    [InlineData("a-a/---", true, "a-a/")]

    [InlineData("aa-aa/aa", true, "aa-aa/Aa")]
    [InlineData("aa-aa/-", true, "aa-aa/")]
    [InlineData("aa-aa/-aa", true, "aa-aa/Aa")]
    [InlineData("aa-aa/aa-", true, "aa-aa/Aa")]
    [InlineData("aa-aa/aa-aa", true, "aa-aa/AaAa")]
    [InlineData("aa-aa/--", true, "aa-aa/")]
    [InlineData("aa-aa/-aa-", true, "aa-aa/Aa")]
    [InlineData("aa-aa/--aa", true, "aa-aa/Aa")]
    [InlineData("aa-aa/aa--", true, "aa-aa/Aa")]
    [InlineData("aa-aa/aa--aa", true, "aa-aa/AaAa")]
    [InlineData("aa-aa/aa-aa-aa", true, "aa-aa/AaAaAa")]
    [InlineData("aa-aa/---", true, "aa-aa/")]

    [InlineData("/a-/", false, "/a-/")]
    [InlineData("/aa-/", false, "/aa-/")]

    [InlineData("/a-/a", true, "/a-/A")]
    [InlineData("/a-/-", true, "/a-/")]
    [InlineData("/a-/-a", true, "/a-/A")]
    [InlineData("/a-/a-", true, "/a-/A")]
    [InlineData("/a-/a-a", true, "/a-/AA")]
    [InlineData("/a-/--", true, "/a-/")]
    [InlineData("/a-/-a-", true, "/a-/A")]
    [InlineData("/a-/--a", true, "/a-/A")]
    [InlineData("/a-/a--", true, "/a-/A")]
    [InlineData("/a-/a--a", true, "/a-/AA")]
    [InlineData("/a-/a-a-a", true, "/a-/AAA")]
    [InlineData("/a-/---", true, "/a-/")]

    [InlineData("/aa-/aa", true, "/aa-/Aa")]
    [InlineData("/aa-/-", true, "/aa-/")]
    [InlineData("/aa-/-aa", true, "/aa-/Aa")]
    [InlineData("/aa-/aa-", true, "/aa-/Aa")]
    [InlineData("/aa-/aa-aa", true, "/aa-/AaAa")]
    [InlineData("/aa-/--", true, "/aa-/")]
    [InlineData("/aa-/-aa-", true, "/aa-/Aa")]
    [InlineData("/aa-/--aa", true, "/aa-/Aa")]
    [InlineData("/aa-/aa--", true, "/aa-/Aa")]
    [InlineData("/aa-/aa--aa", true, "/aa-/AaAa")]
    [InlineData("/aa-/aa-aa-aa", true, "/aa-/AaAaAa")]
    [InlineData("/aa-/---", true, "/aa-/")]

    [InlineData("-b/a-a/", false, "-b/a-a/")]
    [InlineData("-bb/aa-aa/", false, "-bb/aa-aa/")]

    [InlineData("-b/a-a/a", true, "-b/a-a/A")]
    [InlineData("-b/a-a/-", true, "-b/a-a/")]
    [InlineData("-b/a-a/-a", true, "-b/a-a/A")]
    [InlineData("-b/a-a/a-", true, "-b/a-a/A")]
    [InlineData("-b/a-a/a-a", true, "-b/a-a/AA")]
    [InlineData("-b/a-a/--", true, "-b/a-a/")]
    [InlineData("-b/a-a/-a-", true, "-b/a-a/A")]
    [InlineData("-b/a-a/--a", true, "-b/a-a/A")]
    [InlineData("-b/a-a/a--", true, "-b/a-a/A")]
    [InlineData("-b/a-a/a--a", true, "-b/a-a/AA")]
    [InlineData("-b/a-a/a-a-a", true, "-b/a-a/AAA")]
    [InlineData("-b/a-a/---", true, "-b/a-a/")]

    [InlineData("-bb/aa-aa/aa", true, "-bb/aa-aa/Aa")]
    [InlineData("-bb/aa-aa/-", true, "-bb/aa-aa/")]
    [InlineData("-bb/aa-aa/-aa", true, "-bb/aa-aa/Aa")]
    [InlineData("-bb/aa-aa/aa-", true, "-bb/aa-aa/Aa")]
    [InlineData("-bb/aa-aa/aa-aa", true, "-bb/aa-aa/AaAa")]
    [InlineData("-bb/aa-aa/--", true, "-bb/aa-aa/")]
    [InlineData("-bb/aa-aa/-aa-", true, "-bb/aa-aa/Aa")]
    [InlineData("-bb/aa-aa/--aa", true, "-bb/aa-aa/Aa")]
    [InlineData("-bb/aa-aa/aa--", true, "-bb/aa-aa/Aa")]
    [InlineData("-bb/aa-aa/aa--aa", true, "-bb/aa-aa/AaAa")]
    [InlineData("-bb/aa-aa/aa-aa-aa", true, "-bb/aa-aa/AaAaAa")]
    [InlineData("-bb/aa-aa/---", true, "-bb/aa-aa/")]

    [InlineData("/b-b/a/", false, "/b-b/a/")]
    [InlineData("/bb-bb/aa/", false, "/bb-bb/aa/")]

    [InlineData("/b-b/a/a", true, "/b-b/a/A")]
    [InlineData("/b-b/a/-", true, "/b-b/a/")]
    [InlineData("/b-b/a/-a", true, "/b-b/a/A")]
    [InlineData("/b-b/a/a-", true, "/b-b/a/A")]
    [InlineData("/b-b/a/a-a", true, "/b-b/a/AA")]
    [InlineData("/b-b/a/--", true, "/b-b/a/")]
    [InlineData("/b-b/a/-a-", true, "/b-b/a/A")]
    [InlineData("/b-b/a/--a", true, "/b-b/a/A")]
    [InlineData("/b-b/a/a--", true, "/b-b/a/A")]
    [InlineData("/b-b/a/a--a", true, "/b-b/a/AA")]
    [InlineData("/b-b/a/a-a-a", true, "/b-b/a/AAA")]
    [InlineData("/b-b/a/---", true, "/b-b/a/")]

    [InlineData("/bb-bb/aa/aa", true, "/bb-bb/aa/Aa")]
    [InlineData("/bb-bb/aa/-", true, "/bb-bb/aa/")]
    [InlineData("/bb-bb/aa/-aa", true, "/bb-bb/aa/Aa")]
    [InlineData("/bb-bb/aa/aa-", true, "/bb-bb/aa/Aa")]
    [InlineData("/bb-bb/aa/aa-aa", true, "/bb-bb/aa/AaAa")]
    [InlineData("/bb-bb/aa/--", true, "/bb-bb/aa/")]
    [InlineData("/bb-bb/aa/-aa-", true, "/bb-bb/aa/Aa")]
    [InlineData("/bb-bb/aa/--aa", true, "/bb-bb/aa/Aa")]
    [InlineData("/bb-bb/aa/aa--", true, "/bb-bb/aa/Aa")]
    [InlineData("/bb-bb/aa/aa--aa", true, "/bb-bb/aa/AaAa")]
    [InlineData("/bb-bb/aa/aa-aa-aa", true, "/bb-bb/aa/AaAaAa")]
    [InlineData("/bb-bb/aa/---", true, "/bb-bb/aa/")]
    public void SegmentsWithHyphens(string path, bool changed, string expectedPath)
    {
        Assert.Equal(changed, HanselmanPaths.TryKebabToPascalCase(path, out var newpath));
        Assert.Equal(expectedPath, newpath);
    }
}
